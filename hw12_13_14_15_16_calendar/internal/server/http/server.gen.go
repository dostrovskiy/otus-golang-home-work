//go:build go1.22

// Package internalhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internalhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Event defines model for Event.
type Event struct {
	Description  *string    `json:"description,omitempty"`
	End          *time.Time `json:"end,omitempty"`
	ID           *string    `json:"id,omitempty"`
	Notified     *bool      `json:"notified,omitempty"`
	NotifyBefore *int64     `json:"notifyBefore,omitempty"`
	NotifyStart  *time.Time `json:"notifyStart,omitempty"`
	OwnerID      *string    `json:"ownerId,omitempty"`
	Start        *time.Time `json:"start,omitempty"`
	Title        *string    `json:"title,omitempty"`
}

// GetEventsByPeriodParams defines parameters for GetEventsByPeriod.
type GetEventsByPeriodParams struct {
	Start time.Time `form:"start" json:"start"`
	End   time.Time `form:"end" json:"end"`
}

// GetEventsForNotifyParams defines parameters for GetEventsForNotify.
type GetEventsForNotifyParams struct {
	NotifyDate time.Time `form:"notify-date" json:"notify-date"`
	Notified   bool      `form:"notified" json:"notified"`
}

// PostEventJSONRequestBody defines body for PostEvent for application/json ContentType.
type PostEventJSONRequestBody = Event

// PutEventIDJSONRequestBody defines body for PutEventID for application/json ContentType.
type PutEventIDJSONRequestBody = Event

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создать событие
	// (POST /event)
	PostEvent(w http.ResponseWriter, r *http.Request)
	// Удалить событие по ID
	// (DELETE /event/{id})
	DeleteEventID(w http.ResponseWriter, r *http.Request, id string)
	// Получить событие по ID
	// (GET /event/{id})
	GetEventID(w http.ResponseWriter, r *http.Request, id string)
	// Обновить событие по ID
	// (PUT /event/{id})
	PutEventID(w http.ResponseWriter, r *http.Request, id string)
	// Получить список событий за период start - end
	// (GET /events/by-period)
	GetEventsByPeriod(w http.ResponseWriter, r *http.Request, params GetEventsByPeriodParams)
	// Получить список событий для отправки уведомлений
	// (GET /events/for-notify)
	GetEventsForNotify(w http.ResponseWriter, r *http.Request, params GetEventsForNotifyParams)
	// Приветствие
	// (GET /hello)
	GetHello(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostEvent operation middleware
func (siw *ServerInterfaceWrapper) PostEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEventID operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEventID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventID operation middleware
func (siw *ServerInterfaceWrapper) GetEventID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutEventID operation middleware
func (siw *ServerInterfaceWrapper) PutEventID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEventID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsByPeriod operation middleware
func (siw *ServerInterfaceWrapper) GetEventsByPeriod(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsByPeriodParams

	// ------------- Required query parameter "start" -------------

	if paramValue := r.URL.Query().Get("start"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Required query parameter "end" -------------

	if paramValue := r.URL.Query().Get("end"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsByPeriod(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsForNotify operation middleware
func (siw *ServerInterfaceWrapper) GetEventsForNotify(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsForNotifyParams

	// ------------- Required query parameter "notify-date" -------------

	if paramValue := r.URL.Query().Get("notify-date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "notify-date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "notify-date", r.URL.Query(), &params.NotifyDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notify-date", Err: err})
		return
	}

	// ------------- Required query parameter "notified" -------------

	if paramValue := r.URL.Query().Get("notified"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "notified"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "notified", r.URL.Query(), &params.Notified)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notified", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsForNotify(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHello operation middleware
func (siw *ServerInterfaceWrapper) GetHello(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHello(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/event", wrapper.PostEvent)
	m.HandleFunc("DELETE "+options.BaseURL+"/event/{id}", wrapper.DeleteEventID)
	m.HandleFunc("GET "+options.BaseURL+"/event/{id}", wrapper.GetEventID)
	m.HandleFunc("PUT "+options.BaseURL+"/event/{id}", wrapper.PutEventID)
	m.HandleFunc("GET "+options.BaseURL+"/events/by-period", wrapper.GetEventsByPeriod)
	m.HandleFunc("GET "+options.BaseURL+"/events/for-notify", wrapper.GetEventsForNotify)
	m.HandleFunc("GET "+options.BaseURL+"/hello", wrapper.GetHello)

	return m
}

type PostEventRequestObject struct {
	Body *PostEventJSONRequestBody
}

type PostEventResponseObject interface {
	VisitPostEventResponse(w http.ResponseWriter) error
}

type PostEvent201JSONResponse Event

func (response PostEvent201JSONResponse) VisitPostEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEventIDRequestObject struct {
	ID string `json:"id"`
}

type DeleteEventIDResponseObject interface {
	VisitDeleteEventIDResponse(w http.ResponseWriter) error
}

type DeleteEventID204Response struct {
}

func (response DeleteEventID204Response) VisitDeleteEventIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEventID404Response struct {
}

func (response DeleteEventID404Response) VisitDeleteEventIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEventIDRequestObject struct {
	ID string `json:"id"`
}

type GetEventIDResponseObject interface {
	VisitGetEventIDResponse(w http.ResponseWriter) error
}

type GetEventID200JSONResponse Event

func (response GetEventID200JSONResponse) VisitGetEventIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventID404Response struct {
}

func (response GetEventID404Response) VisitGetEventIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutEventIDRequestObject struct {
	ID   string `json:"id"`
	Body *PutEventIDJSONRequestBody
}

type PutEventIDResponseObject interface {
	VisitPutEventIDResponse(w http.ResponseWriter) error
}

type PutEventID200JSONResponse Event

func (response PutEventID200JSONResponse) VisitPutEventIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEventID404Response struct {
}

func (response PutEventID404Response) VisitPutEventIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEventsByPeriodRequestObject struct {
	Params GetEventsByPeriodParams
}

type GetEventsByPeriodResponseObject interface {
	VisitGetEventsByPeriodResponse(w http.ResponseWriter) error
}

type GetEventsByPeriod200JSONResponse []Event

func (response GetEventsByPeriod200JSONResponse) VisitGetEventsByPeriodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForNotifyRequestObject struct {
	Params GetEventsForNotifyParams
}

type GetEventsForNotifyResponseObject interface {
	VisitGetEventsForNotifyResponse(w http.ResponseWriter) error
}

type GetEventsForNotify200JSONResponse []Event

func (response GetEventsForNotify200JSONResponse) VisitGetEventsForNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHelloRequestObject struct {
}

type GetHelloResponseObject interface {
	VisitGetHelloResponse(w http.ResponseWriter) error
}

type GetHello204Response struct {
}

func (response GetHello204Response) VisitGetHelloResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Создать событие
	// (POST /event)
	PostEvent(ctx context.Context, request PostEventRequestObject) (PostEventResponseObject, error)
	// Удалить событие по ID
	// (DELETE /event/{id})
	DeleteEventID(ctx context.Context, request DeleteEventIDRequestObject) (DeleteEventIDResponseObject, error)
	// Получить событие по ID
	// (GET /event/{id})
	GetEventID(ctx context.Context, request GetEventIDRequestObject) (GetEventIDResponseObject, error)
	// Обновить событие по ID
	// (PUT /event/{id})
	PutEventID(ctx context.Context, request PutEventIDRequestObject) (PutEventIDResponseObject, error)
	// Получить список событий за период start - end
	// (GET /events/by-period)
	GetEventsByPeriod(ctx context.Context, request GetEventsByPeriodRequestObject) (GetEventsByPeriodResponseObject, error)
	// Получить список событий для отправки уведомлений
	// (GET /events/for-notify)
	GetEventsForNotify(ctx context.Context, request GetEventsForNotifyRequestObject) (GetEventsForNotifyResponseObject, error)
	// Приветствие
	// (GET /hello)
	GetHello(ctx context.Context, request GetHelloRequestObject) (GetHelloResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostEvent operation middleware
func (sh *strictHandler) PostEvent(w http.ResponseWriter, r *http.Request) {
	var request PostEventRequestObject

	var body PostEventJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEvent(ctx, request.(PostEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEvent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventResponseObject); ok {
		if err := validResponse.VisitPostEventResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEventID operation middleware
func (sh *strictHandler) DeleteEventID(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteEventIDRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEventID(ctx, request.(DeleteEventIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEventID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEventIDResponseObject); ok {
		if err := validResponse.VisitDeleteEventIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventID operation middleware
func (sh *strictHandler) GetEventID(w http.ResponseWriter, r *http.Request, id string) {
	var request GetEventIDRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventID(ctx, request.(GetEventIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventIDResponseObject); ok {
		if err := validResponse.VisitGetEventIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEventID operation middleware
func (sh *strictHandler) PutEventID(w http.ResponseWriter, r *http.Request, id string) {
	var request PutEventIDRequestObject

	request.ID = id

	var body PutEventIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEventID(ctx, request.(PutEventIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEventID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEventIDResponseObject); ok {
		if err := validResponse.VisitPutEventIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsByPeriod operation middleware
func (sh *strictHandler) GetEventsByPeriod(w http.ResponseWriter, r *http.Request, params GetEventsByPeriodParams) {
	var request GetEventsByPeriodRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsByPeriod(ctx, request.(GetEventsByPeriodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsByPeriod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsByPeriodResponseObject); ok {
		if err := validResponse.VisitGetEventsByPeriodResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsForNotify operation middleware
func (sh *strictHandler) GetEventsForNotify(w http.ResponseWriter, r *http.Request, params GetEventsForNotifyParams) {
	var request GetEventsForNotifyRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsForNotify(ctx, request.(GetEventsForNotifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsForNotify")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsForNotifyResponseObject); ok {
		if err := validResponse.VisitGetEventsForNotifyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHello operation middleware
func (sh *strictHandler) GetHello(w http.ResponseWriter, r *http.Request) {
	var request GetHelloRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHello(ctx, request.(GetHelloRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHello")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHelloResponseObject); ok {
		if err := validResponse.VisitGetHelloResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWy27bOhCGX0XgOUs5cs4JuvAuQXrxpjDQZdGFYo8TBhapkHQKwTCQ2EC7aIFsum5R",
	"9AXcwEacm/IKwzcqSDpybCuOily66MaWqOEM+c/H4XRInUcxZ8CUJJUOkfUdiEL7+HwfmDIPseAxCEXB",
	"DjdA1gWNFeXMvKokBlIhUgnKtknXJ8AaZrzJRRQqUiGNUEFJ0QiIv2hMG7k+GFe0SeHmxy3OWxCy7Guy",
	"AU0uYCYUZerZ2jQMZQq2QUynvFGhUMUXx98zENX8Fcrfc6WoakGOo25my7d2oa5I1wxR1uQLUpP1WtXD",
	"IZ7rI0/38Uof4ACP8RxHeIljM3iIKf7Un3TPvOIFjj08w8HEYogDfaCPVki2GJdgb71WJT7ZByFdmNWV",
	"8krZbj8GFsaUVMj/dsgncah2LAMBZGxwaf8NIaFZqNGL1LhUDh+fCNhrg1QbvJEYwzpnajI3jOMWrdtZ",
	"wa50ODn+zNO/ApqkQv4JpoAGEzoD59tqZdxTYVBRog12QMacSQfrf+XVxwg6mxj8PhUeRy4PJ0ZwvMTU",
	"5li2oygUybWt/ah7+vNMznBkbZ22QYc2uo6BFihYlHjTjts1VTdtbkQYgQIhSeVth1CzMJMv4hMWRvY4",
	"NMi8XP6Nrc+T+W5ByrVFJue33rfbdsSlBqK1ArPw0v0M8BSH11NnVfsx8TvOUc3DK0y96qYJtw05NL4E",
	"9aQ6lZ8AuS840j0nydzBf0DVv2GK57qvP96pe9zOqwLtR9f9j5aW8pOXFvNiEpXV/Yc8Y18z38uzndUo",
	"GWwlpRgE5faOXHr25EZSc5b5KOy1QSRTFtz1ugyHIvdu18/3blqUe/u+77mnCiJZEIwseihEmNwCyhWO",
	"bcrOZjN3WuBU3zbVwxMcmMyP9AGOMcWhZzPjlTyj4U0UmlyUXJd1NwsvuHjtTAvB4NyWTDIeDYms4yxQ",
	"grJW9C9hwPWcmOpe1nWemWunj8c4wiGmeHHdhk4iBTvQavFlILyyBsVaDN2zUU2X+8HiaGE8NjegPtQ9",
	"W7COFna4aGQbrG73VwAAAP//aHDaIfMMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
